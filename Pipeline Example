Declrative Piplinee: 

First Pipeline: Maven Build and Deploy
# Declrative Pipepline to clone Git repo, create a maven build and deploy on to tomcat server.
Pre-requistes:
1) Jenkins Server : 
Installation: Java/Maven/Git/Jenkins 
Environment set-up: Global Tool - Java/MAVEN/GIT configured in the Global Tool , Plug-in - Copy artifcat/ deploy/ ssh client alongwith plug-in installed on intial set-up.
2) Tomcat Server : Java/Tomcat installed and access to app user on the detination location in the Deploy Stage.
3) Use Pipeline Syntax to gnerate script syntax based on the sample step tool: use a tool from a pre-defined Tool Installation, sshagent:SSH Agent, sh:shell script ....


pipeline {
    agent any  //In the Test envionment we are declaring buil to happen on any agent, however, in the Production set-up we should define a node/host where to run the build
    tools {
        maven "Maven 3.6"  // Select tool as mavne to generates script which is " tool name: 'Maven 3.6', type: 'maven' " 
    }
    stages {
        stage ('clone repo') {
            steps {
                git "https://github.com/omeshwarkandari/formaven.git"   // Select tool as git > tool name: 'Default', type: 'git'
            }
        }
        stage ('build') {
            steps {
                sh " mvn clean install"  // Select sh and if we fill mvn clean install > sh 'mvn clean install'
            }
        }
        stage ('deploy') {
            steps {
                sshagent(['tomcat8']) {
                   sh "scp -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/test1/target/*.war ec2-user@172.31.80.190:/opt/apache-tomcat-8.5.68/webapps"

                   // Select sshsgent: add jenkins authetication with SSH Username with private key option where user name is application user & private key is the *.pem     //e.g. here, user name: ec2-user & private key : cat test1.pem because ec2-user is authorized to ssh on the tomcat server runing on the ec2-instance.
                   // Generate Pipeline > sshagent(['tomcat8']) { // some block }
                   // Some blok click on help beside ssgagent menu >  sh 'ssh -o StrictHostKeyChecking=no -l cloudbees 192.168.1.106 uname -a'
                   // 'ssh -o StrictHostKeyChecking=no -l cloudbees 192.168.1.106 uname -a' is modified as 'scp -o StrictHostKeyChecking=no srcuser@host:dest'
                   // we have replaced ssh by scp as we need to copy artifacts from the source which is /var/lib/jenkins/workspace/test1/target/*.war
                   // user@host : ec2-user@tomcat-server IP-Address and Destination: /opt/apache-tomcat-8.5.68/webapps in this case of tomcat server so access to ec2-useer on the destination is required to write the war file to avoid permission deny.
                   // -o StrictHostKeyChecking=no is added to mitigate the *.pem authetication issue while ruining the dploy job.
                   // Ideally src "var/lib/jenkins/workspace/Project Name" should be picked automatically and we should only define path to artifact afer Project Name but its throwing some error so in oir case sh "scp -o StrictHostKeyChecking=no **/*.war ec2-user@172.31.80.190:/opt/apache-tomcat-8.5.68/webapps" is working.
                }                
            }
        }
    }
}


2nd Pipeline: Declrative pipeline for Jenkins and Sonarqube integration where Maven build is Analysed for static analysis of code to detect bugs, code smells etc as well as 
code qulaity is verified through Quality Gate before declaring code is good to store and depoly.
Pre-requisites:
1) On Jenkins Server : Install Sonar Scanner Plug-in and configure
Global Tool Config - Sonarqube Scanner, System Config - Sonarqube Server and Sonar Analysis Properties in the file /opt/sonar-scanner/conf/sonar-scanner.properties
Sonarqube Scanner name "sonar-scanner" is based on the SONAR_RUNNER_HOME i.e. /opt/sonar-scanner of the Jenkins Server where sonar scanner plug-in gets installed.
System Config: Server URL should be http://<sonar-public-ip>:9000/sonar, not sonar/ because this has insered addtional / between sonar /api in the Code Analysis report
http://sonar-public-ip:9000/sonar/api/ce/task?id=xxxx and Server authentication token is the Token generated on the Sonarqube Server under My Accounts--Security--Token
2) On the Sonarqube Server: Webhook is created under Administrator --Configuration--Webhooks, Syntax:  URL:https//<jenkins-server>/sonarqube-webhook/ to enable Sonarqube 
Server connecivity with Jenkins Server e.g. URL: http://3.88.145.211:8080//sonarqube-webhook/portal  and Name : jenkins (a random name as tested with name "test" as well )


pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven 3.6"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Sonar Analysis') {
            environment { scannerHome = tool 'sonar-scanner' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }                
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time:5 , unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}


3rd Pipeline: Declrative pipeline for Jenkins, Sonarqube Analyzer and Artifactory: Code passed by Quality Gate is pushed in the Artifcatory Repository for Deployment.
# In this pipeline we have added configured Artifactory Plug-in on the Jenkins and added publisher step in the 2nd Pipeline.
# Artifactory Plug-in will enable JFrog option in the Jenkins System Config and configure the Artifactory JFrog Configuration option as below;
# Instance ID : <Artifacory Server Name> e.g. "artifactory" 
# URL : http://<artifactory-server-dns>:8081/<Artifacory Server Name> e.g. http://ec2-54-89-19-142.compute-1.amazonaws.com:8081/artifactory
# Deploy Credential: user name : <Artifactory User with admin priv>> & Password : <Art. User Password> by selecting "treat user name as secret". 
Note: Test Connection by selecting ID which will provide the o/p like "Found Artifactory version on http://<artifactory-server-dns>:8081/<Artifacory Server Name>
and URL should be verified in the advance section to ensure additonal thread is not added which may cause issue and Credential should be set-up with 

pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven 3.6"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Sonar Analysis') {
            environment { scannerHome = tool 'sonar-scanner' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }                
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time:1 , unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "artifactory"
                )
            }
        }
    }
}

