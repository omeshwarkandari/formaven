Declrative Piplinee: 

First Pipeline: Maven Build and Deploy

pipeline {
    agent any
    environment {
        PATH = "/opt/maven/apache-maven-3.6.0/bin:$PATH"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Deploy'){  
            steps {
                sshagent(['Deploy']) {
                    sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.86.242:/opt/apache-tomcat-8.5.65/webapps"
                }
            }           
        }    
   }          
}


2nd Pipeline: Declrative pipeline for Jenkins and Sonarqube integration.
Pre-requisites:
1) On Jenkins Server : Install Sonar Scanner Plug-in and configure
Global Tool Config - Sonarqube Scanner, System Config - Sonarqube Server and Sonar Analysis Properties in the file /opt/sonar-scanner/conf/sonar-scanner.properties
Sonarqube Scanner name "sonar-scanner" is based on the SONAR_RUNNER_HOME i.e. /opt/sonar-scanner of the Jenkins Server where sonar scanner plug-in gets installed.
System Config: Server URL should be http://<sonar-public-ip>:9000/sonar, not sonar/ because this has insered addtional / between sonar /api in the Code Analysis report
http://sonar-public-ip:9000/sonar/api/ce/task?id=xxxx and Server authentication token is the Token generated on the Sonarqube Server under My Accounts--Security--Token
2) On the Sonarqube Server:
Webhook is created under Administrator --Configuration--Webhooks e.g. URL:https//<jenkins-server>/sonarqube-webhook/ and Name:e.g. jenkins

pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven 3.6"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Sonar Analysis') {
            environment { scannerHome = tool 'sonar-scanner' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }                
            }
        }
    }
}



3rd Pipeline: Declrative pipeline for Jenkins, Sonarqube Analyzer and Artifactory:
# In this pipeline we have added configured Artifactory Plug-in on the Jenkins and added publisher step in the 2nd Pipeline.
# Artifactory Plug-in will enable JFrog option in the Jenkins System Config and configure the Artifactory JFrog Configuration option as below;
# Instance ID : <Artifacory Server Name> e.g. "artifactory" , URL : http://<artifactory-server-dns>:8081/<Artifacory Server Name> 
e.g. http://ec2-54-89-19-142.compute-1.amazonaws.com:8081/artifactory, Deploy Credential: user name : <Artifactory User with admin priv>> & Password : <Art. User Passwor>
Note: URL should be verified in the advance section to ensure additonal thread is not added which may cause issue.

pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven 3.6"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Sonar Analysis') {
            environment { scannerHome = tool 'sonar-scanner' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }                
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "artifactory"
                )
            }
        }
    }
    
    
    
  4th Pipeline - Under Test : Declrative pipeline for Jenkins and Sonarqube with Quality Gate ( Note : Quality Gate stage is not executing correclty)
  
  pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven 3.6"
    }
    stages {
        stage("clone code"){
            steps{
                git 'https://github.com/omeshwarkandari/formaven.git'
            }
        }
        stage("build code"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Sonar Analysis') {
            environment { scannerHome = tool 'sonar-scanner' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }                
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time:1 , unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}

