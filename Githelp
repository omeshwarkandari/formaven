Process to clone and add a repository on the Local System:

1.	Check the status of added remote or any other repo if any 
$ git remote –v

2.	Remove repo if any 
$ git remote rm origin

3.	Clone the new repo
$ git clone https://github.com/omeshwarkandari/formaven.git

4.	Add the new repo
$ git remote add origin https://github.com/omeshwarkandari/formaven.git

5.	Check the repo status and for this case fetch/push should be below.
$ git remote –v
origin	https://github.com/omeshwarkandari/formaven.git (fetch)
origin	https://github.com/omeshwarkandari/formaven.git (push)

6.	Configure the access for new Repo Global and Local if needed
$ git config --global user.email " omeshwarkandari@gmail.com"
$ git-clone@ubuntu:~$ git config --global user.name "omeshwarkandari"

7.	Go to new Repo
$ cd formaven/

8.	Do the changes 
$ sudo nano src/main/webapp/index.jsp

9.	Add and commit the changes
$ git commit -am "Test1"

10.	 Git Push
$ git push https://github.com/omeshwarkandari/formaven.git
Source Code changes will be pushed to Jenkins based on the Git Repo integration and Crone Job settings.

11. Craete a branch from Local System
$ git branch
  dev1
* master
$ git branch stage  # Create a new branch stage
$ git branch
  dev1
* master
  stage
  
12. Remove a branch from Local System
$ git branch -d stage
Deleted branch stage (was 524fa3e).
$ git branch
  dev1
* master

13. In case Original Repo on Github has branches craeted but local repo does not show e.g we have two branched New and stage under Master branch
, however, local repo does not reflect even after git pull then we can use git fetch from origin
$ git pull origin master
$ git branch
* master
$ git checkout New
error: pathspec 'New' did not match any file(s) known to git

#Git fetch will help in cloning all the branches
$ git fetch origin
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (11/11), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 6 (delta 4), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (6/6), 1.46 KiB | 57.00 KiB/s, done.
From https://github.com/omeshwarkandari/formaven
   524fa3e..93b0ba2  master     -> origin/master
 * [new branch]      New        -> origin/New
 * [new branch]      stage      -> origin/stage
# git branch will show only Master but git chekout will be successful now which failed earlier for New branch.
$ git branch  
* master
$ git checkout New
Branch 'New' set up to track remote branch 'New' from 'origin'.
Switched to a new branch 'New'
$ git branch
* New
  master
$ git checkout stage
Branch 'stage' set up to track remote branch 'stage' from 'origin'.
Switched to a new branch 'stage'
$ git branch
  New
  master
* stage
# Now we will delete a branch to simulate Multi Branch working which says Pipeline triggers only for the branches with jenkinsfile....to be followed in the Jenkins Config.
$ git branch -d New
$ git branch
  master
* stage
# Deleting a branch locally does not delete the branch from the Master Repo so use "$ git push <remote_repo> --delete <remote_branch>"
$ git push https://github.com/omeshwarkandari/formaven.git --delete New
Username for 'https://github.com': omeshwarkandari
Password for 'https://omeshwarkandari@github.com':
To https://github.com/omeshwarkandari/formaven.git
 - [deleted]         New

14. Git add and delete it
e.g. $ git add sample.txt
$ git rm --cached sample.txt

15. How to delete a commit 
$ git reset --hard HEAD^ ( This will delete the last commit)
$ git reset --hard HEAD^ ( This will reset the last two commits)
Also we can use below to view as well as remove a commit in the text editor file.
$ git rebase -i HEAD~2


Conflict Handling:

Git Push rejected because current branch is behines Master due to commits directly on Master
$ git status  ( to understand detailed info on deviation)
$ git reset --hard HEAD~1 
$ git pull ( Local/current branch will be in sync with remote Master Branch now)
$ git status ( nothing to commit, working tree clean and now we can commit changes from the current branch to Master)
Change the code and commit
$ git commit -am "xyz"
$ git push

Merge Conflict:
Dev1 and Dev2 updated the Source Code but Dev1 updated it in a feature branch after cloning Master while Dev2 also clone Master in local system but updated directly on the Master.
How to simulate the issue:
#reate a file Info in master with some data, Craete a Branch dev1 and let two developers (contrubutor working on dev1 and Local on Master) edit the file Info
# Cont will swicth to dev1 branch and clone the Master Repo e.f. formaven and while edit/commit the changes in the file Info, at the same time Local will clone/edit/merge/push changes
e.g. Info File content are below so while dev1 updates location to Banaglore the Local dev changes to Mumbai: 
Code will be changed
Location: 
Hello World!
$ git branchn
* master
#Create a Branch Dev1 
$ git branch dev1
$ git branch
  dev1
* master
#Cont will switch to dev1 branch and commit changes
$ git checkout dev1
Switched to branch 'dev1'
$ git branch
* dev1
  maste
$ git pull origin master
$ sudo nano Info
$ git commit -am "dev1"
# Local Developer will the same time clone the Master on local systema and push the changes
$ git checkout master
$ git branch
  dev1
* master
$ git pull origin master
$ sudo nano Info
$ git commit -am "local"
$ git push
# If we observe Info file on the Master then it will show updates done by the Local Developer
( Code will be changed   Location: Mumbai  Hello World!)
# Cont Developer is now in the process of merger so lets swicth to dev1 brach
$ git checkout dev1
* dev1
 master
 # Even after git pull the Info file will show the original chnages and not the updated one from Local Dev because we are in Branch so Cont Dev will first merge his changes
 $ git pull
Already up to date.
 $ nano Info 
 $ git checkout master
 $ git merge dev1
error: 
Auto-merging Info
CONFLICT (content): Merge conflict in Info
Automatic merge failed; fix conflicts and then commit the result.
We can observe the conflicts:
$ cat Info
Code will be changed
<<<<<<< HEAD
Location: Mumbai
=======
Location: Bangalore
>>>>>>> dev1
Hello World!
# No conflict with the common updates or no chnages in the original file  e.g. Code will be changed Hello World!
# Conflict with the different update e.g. Location

Resolution: either bot the deveopers will dscuss in person to come to a common/best commit or use third party tools for long/comlex codes.
In this case the file was  updated with both the Location and commit/push was done.
$ sudo nano Info
Code will be changed
Location: Mumbai
Location: Bangalore
Hello World!
$ git commit -am "final update"
$ git push origin master


  
